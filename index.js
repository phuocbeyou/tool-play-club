import {
  promptMainMenu,
  promptAccountMenu,
  promptUserAdd,
  promptUserUpdate,
  promptUserDelete,
  promptUserSelect,
} from './src/ui/prompt.js';

import {
  userAdd,
  userUpdate,
  userDelete,
  userSelect,
  userGetSelected,
} from './src/commands/user.js';
import { showBanner } from './src/ui/banner.js';

async function main() {
  while (true) {
    showBanner()
    const mainCmd = await promptMainMenu();

    if (mainCmd === 'exit') {
      console.log('üëã Tho√°t ch∆∞∆°ng tr√¨nh. H·∫πn g·∫∑p l·∫°i!');
      process.exit(0);
    }

    if (mainCmd === 'account') {
      while (true) {
        const accountCmd = await promptAccountMenu();

        if (accountCmd === 'back') break;

        if (accountCmd === 'add') {
          const user = await promptUserAdd();
          await userAdd(user);
        } else if (accountCmd === 'update') {
          const user = await promptUserUpdate();
          await userUpdate(user);
        } else if (accountCmd === 'delete') {
          const { id } = await promptUserDelete();
          await userDelete(id);
        } else if (accountCmd === 'select') {
          const id = await promptUserSelect();
          await userSelect(id);
        } else if (accountCmd === 'current') {
          await userGetSelected();
        }
      }
    }

    // C√°c case cho c√°c menu kh√°c
    else if (mainCmd === 'check_wallet') {
      // g·ªçi function ki·ªÉm tra ti·ªÅn v√≠ ·ªü ƒë√¢y
      console.log('Ki·ªÉm tra ti·ªÅn trong v√≠ (demo)');
    } else if (mainCmd === 'get_token') {
      // g·ªçi function l·∫•y token
      console.log('L·∫•y token account (demo)');
    } else if (mainCmd === 'start_bet') {
      // g·ªçi function b·∫Øt ƒë·∫ßu c∆∞·ª£c
      console.log('B·∫Øt ƒë·∫ßu c∆∞·ª£c (demo)');
    }
    // ... th√™m cho taixiu, baocua, alerts sau
  }
}

main().catch(err => {
  console.error('L·ªói kh√¥ng mong mu·ªën:', err);
  process.exit(1);
});
