import { getSettings, saveSettings } from '../logic/dataManager.js';
import { logSuccess, logError } from '../ui/display.js';

// ‚úÖ L∆∞u jackpot target value (number)
export async function setJackpotTargetValue(value) {
  if (typeof value !== 'number' || value < 0) {
    logError('‚ö†Ô∏è Gi√° tr·ªã jackpot ph·∫£i l√† s·ªë d∆∞∆°ng!');
    return;
  }

  const settings = await getSettings();
  settings.jackpotTarget = value;
  await saveSettings(settings);

  logSuccess(`üéØ ƒê√£ l∆∞u jackpot target: ${value}`);
}

// ‚úÖ L∆∞u combo ti·ªÅn c∆∞·ª£c theo ng∆∞·ª°ng jackpot
export async function setBetCombos(combos) {
  const isValid = Array.isArray(combos) && combos.every(c =>
    typeof c.threshold === 'number' &&
    typeof c.amount === 'number' &&
    c.threshold >= 0 &&
    c.amount > 0
  );

  if (!isValid) {
    logError('‚ö†Ô∏è Danh s√°ch combo kh√¥ng h·ª£p l·ªá!');
    return;
  }

  const settings = await getSettings();
  settings.betCombos = combos;
  await saveSettings(settings);

  logSuccess('üí∞ ƒê√£ l∆∞u combo ti·ªÅn c∆∞·ª£c!');
}

// ‚úÖ L∆∞u rule ƒë·∫∑t c∆∞·ª£c theo l·ªãch s·ª≠
export async function setBetRule(rule) {
  if (
    !rule ||
    !Array.isArray(rule.pattern) ||
    typeof rule.result !== 'string'
  ) {
    logError('‚ö†Ô∏è Rule kh√¥ng h·ª£p l·ªá!');
    return;
  }

  const settings = await getSettings();
  settings.betRule = rule;
  await saveSettings(settings);

  logSuccess('üß† ƒê√£ l∆∞u rule ƒë·∫∑t c∆∞·ª£c!');
}
