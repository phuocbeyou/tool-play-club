import inquirer from 'inquirer';
import chalk from 'chalk';

export async function promptEvenOddMenu() {
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'action',
      message: chalk.cyan('üé≤ Ch·ªçn thi·∫øt l·∫≠p c∆∞·ª£c even/odd:'),
      choices: [
        { name: 'üéØ Thi·∫øt l·∫≠p jackpot target', value: 'set_jackpot' },
        { name: 'üí∞ Thi·∫øt l·∫≠p combo ti·ªÅn c∆∞·ª£c', value: 'set_combos' },
        { name: 'üß© Thi·∫øt l·∫≠p rule c∆∞·ª£c', value: 'set_rule' },
        new inquirer.Separator(),
        { name: 'üîô Quay l·∫°i menu ch√≠nh', value: 'back' },
      ],
      pageSize: 10,
    }
  ]);
  return answers.action;
}


// Prompt nh·∫≠p s·ªë jackpot target
export async function promptSetJackpot() {
  const { jackpot } = await inquirer.prompt([
    {
      name: 'jackpot',
      type: 'input',
      message: chalk.yellow('üéØ Nh·∫≠p gi√° tr·ªã jackpot (s·ªë d∆∞∆°ng):'),
      validate: v => {
        if (v.trim() === '') return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi√° tr·ªã';
        const n = Number(v);
        if (isNaN(n) || n <= 0) return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë d∆∞∆°ng l·ªõn h∆°n 0';
        return true;
      },
      filter: v => Number(v),
    }
  ]);
  return jackpot;
}

// Prompt nh·∫≠p m·ªôt combo c∆∞·ª£c (threshold v√† amount)
async function promptOneCombo() {
  const combo = await inquirer.prompt([
    {
      name: 'threshold',
      type: 'input',
      message: chalk.yellow('‚è≥ Nh·∫≠p ng∆∞·ª°ng jackpot (threshold):'),
      validate: v => {
        const n = Number(v);
        if (isNaN(n) || n < 0) return '‚ö†Ô∏è Ph·∫£i l√† s·ªë kh√¥ng √¢m';
        return true;
      },
      filter: v => Number(v),
    },
    {
      name: 'amount',
      type: 'input',
      message: chalk.yellow('üí∞ Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c t∆∞∆°ng ·ª©ng:'),
      validate: v => {
        const n = Number(v);
        if (isNaN(n) || n <= 0) return '‚ö†Ô∏è Ph·∫£i l√† s·ªë l·ªõn h∆°n 0';
        return true;
      },
      filter: v => Number(v),
    }
  ]);
  return combo;
}

// Prompt nh·∫≠p danh s√°ch combo c∆∞·ª£c (l·∫∑p cho ƒë·∫øn khi user ch·ªçn k·∫øt th√∫c)
export async function promptSetBetCombos() {
  const combos = [];

  console.log(chalk.green('üí∞ Nh·∫≠p combo ti·ªÅn c∆∞·ª£c theo ng∆∞·ª°ng jackpot. Nh·∫≠p xong ch·ªçn "Ho√†n th√†nh".'));

  while (true) {
    const combo = await promptOneCombo();
    combos.push(combo);

    const { next } = await inquirer.prompt([
      {
        type: 'list',
        name: 'next',
        message: chalk.blue('B·∫°n c√≥ mu·ªën nh·∫≠p th√™m combo n·ªØa kh√¥ng?'),
        choices: [
          { name: '‚ûï Ti·∫øp t·ª•c nh·∫≠p', value: 'continue' },
          { name: '‚úÖ Ho√†n th√†nh', value: 'done' },
        ],
      }
    ]);

    if (next === 'done') break;
  }

  return combos;
}

// Prompt nh·∫≠p rule c∆∞·ª£c
export async function promptSetBetRule() {
  const answers = await inquirer.prompt([
    {
      name: 'pattern',
      type: 'input',
      message: chalk.yellow('üß© Nh·∫≠p pattern (v√≠ d·ª•: "xiu,xiu" ho·∫∑c "tai,tai"):'),
      validate: v => {
        if (!v || !v.includes(',')) return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t 2 gi√° tr·ªã, ph√¢n c√°ch d·∫•u ph·∫©y';
        return true;
      },
      filter: v => v.split(',').map(s => s.trim()).filter(Boolean),
    },
    {
      name: 'result',
      type: 'input',
      message: chalk.yellow('üß© Nh·∫≠p k·∫øt qu·∫£ c∆∞·ª£c ti·∫øp theo (v√≠ d·ª•: "tai" ho·∫∑c "xiu"):'),
      validate: v => !!v || '‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
      filter: v => v.trim(),
    },
  ]);

  return answers;
}
