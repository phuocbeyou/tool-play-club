import inquirer from 'inquirer';
import chalk from 'chalk';
import { updateGameSetting, updateBetAmountByRuleId } from '../commands/xocdia.js';
import { readRule } from '../logic/dataManager.js';

export async function promptXocDiaMenu() {
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'action',
      message: chalk.cyan('üé≤ Ch·ªçn thi·∫øt l·∫≠p c∆∞·ª£c X√≥c ƒêƒ©a:'),
      choices: [
        { name: 'üéØ Thi·∫øt l·∫≠p jackpot target', value: 'set_jackpot' },
        { name: '‚õî Thi·∫øt l·∫≠p bet stop', value: 'set_bet_stop' },
        { name: 'üîß C·∫≠p nh·∫≠t s·ªë ti·ªÅn c∆∞·ª£c theo c·ª≠a', value: 'update_bet_amount' },
        new inquirer.Separator(),
        { name: 'üîô Quay l·∫°i menu ch√≠nh', value: 'back' },
      ],
      pageSize: 10,
    }
  ]);
  return answers.action;
}

export async function promptSetJackpot() {
  const { jackpot } = await inquirer.prompt([
    {
      name: 'jackpot',
      type: 'input',
      message: chalk.yellow('üéØ Nh·∫≠p gi√° tr·ªã jackpot (s·ªë d∆∞∆°ng):'),
      validate: v => {
        if (v.trim() === '') return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi√° tr·ªã';
        const n = Number(v);
        if (isNaN(n) || n <= 0) return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë d∆∞∆°ng l·ªõn h∆°n 0';
        return true;
      },
      filter: v => Number(v),
    }
  ]);
  await updateGameSetting('JACKPOT_THRESHOLD', jackpot);
  console.log(chalk.green(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t JACKPOT_THRESHOLD th√†nh ${jackpot.toLocaleString('vi-VN')} VND.`));
}

export async function promptSetBetStop() {
  const { betStop } = await inquirer.prompt([
    {
      name: 'betStop',
      type: 'input',
      message: chalk.yellow('‚õî Nh·∫≠p gi√° tr·ªã bet stop (s·ªë d∆∞∆°ng):'),
      validate: v => {
        if (v.trim() === '') return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi√° tr·ªã';
        const n = Number(v);
        if (isNaN(n) || n <= 0) return '‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë d∆∞∆°ng l·ªõn h∆°n 0';
        return true;
      },
      filter: v => Number(v),
    }
  ]);
  await updateGameSetting('BET_STOP', betStop);
  console.log(chalk.green(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t BET_STOP th√†nh ${betStop.toLocaleString('vi-VN')} VND.`));
}

export async function promptUpdateBetAmount() {
  const config = await readRule();
  const choices = config.bettingRules.map(rule => ({
    name: `üé∞ C·ª≠a: ${rule.name} - Hi·ªán t·∫°i: ${rule.betAmount.toLocaleString('vi-VN')} VND`,
    value: rule.id
  }));

  const { selectedRuleId } = await inquirer.prompt([
    {
      type: 'list',
      name: 'selectedRuleId',
      message: chalk.magenta('üìã Ch·ªçn c·ª≠a ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë ti·ªÅn c∆∞·ª£c:'),
      choices,
    }
  ]);

  const { newAmount } = await inquirer.prompt([
    {
      type: 'input',
      name: 'newAmount',
      message: chalk.yellow('üí∞ Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c m·ªõi:'),
      validate: v => {
        const n = Number(v);
        if (isNaN(n) || n <= 0) return '‚ö†Ô∏è Nh·∫≠p s·ªë d∆∞∆°ng h·ª£p l·ªá';
        return true;
      },
      filter: v => Number(v),
    }
  ]);

  await updateBetAmountByRuleId(selectedRuleId, newAmount);
  console.log(chalk.green(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë ti·ªÅn c∆∞·ª£c cho c·ª≠a th√†nh c√¥ng.`));
}
